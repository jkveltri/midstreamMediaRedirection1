{
  "_args": [
    [
      {
        "raw": "hls.js_nomin",
        "scope": null,
        "escapedName": "hls.js_nomin",
        "name": null,
        "rawSpec": "hls.js_nomin",
        "spec": "D:\\OneDrive\\Documents\\2016-2017\\EECS 402\\Project\\midstreamMediaRedirection1\\static\\hls_players\\hls.js_nomin",
        "type": "directory"
      },
      "D:\\OneDrive\\Documents\\2016-2017\\EECS 402\\Project\\midstreamMediaRedirection1\\static\\hls_players"
    ]
  ],
  "_from": "hls.js_nomin",
  "_id": "hls.js@0.7.4",
  "_inCache": true,
  "_location": "/hls.js",
  "_phantomChildren": {},
  "_requested": {
    "raw": "hls.js_nomin",
    "scope": null,
    "escapedName": "hls.js_nomin",
    "name": null,
    "rawSpec": "hls.js_nomin",
    "spec": "D:\\OneDrive\\Documents\\2016-2017\\EECS 402\\Project\\midstreamMediaRedirection1\\static\\hls_players\\hls.js_nomin",
    "type": "directory"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:hls.js_nomin",
  "_shasum": "6a2c3c2d466f1f7f4b412ca2d10143cb8b904072",
  "_shrinkwrap": null,
  "_spec": "hls.js_nomin",
  "_where": "D:\\OneDrive\\Documents\\2016-2017\\EECS 402\\Project\\midstreamMediaRedirection1\\static\\hls_players",
  "authors": "Guillaume du Pontavice <guillaume.dupontavice@dailymotion.com>",
  "bugs": {
    "url": "https://github.com/video-dev/hls.js/issues"
  },
  "dependencies": {},
  "description": "JavaScript HLS client using MediaSourceExtension",
  "devDependencies": {
    "arraybuffer-equal": "^1.0.4",
    "babel-cli": "^6.24.1",
    "babel-preset-env": "^1.4.0",
    "babel-preset-es2015": "^6.18.0",
    "babel-register": "^6.24.0",
    "babelify": "^7.2.0",
    "browserify": "^14.1.0",
    "browserify-conditionalify": "^1.0.0",
    "browserify-derequire": "^0.9.4",
    "browserify-versionify": "^1.0.6",
    "bundle-collapser": "^1.2.1",
    "chromedriver": "^2.27.3",
    "deep-strict-equal": "^0.2.0",
    "exorcist": "^0.4.0",
    "http-server": "^0.9.0",
    "jshint": "^2.9.4",
    "live-reload": "^1.1.0",
    "mocha": "^3.0.2",
    "mversion": "^1.10.1",
    "opener": "^1.4.0",
    "parallelshell": "^2.0.0",
    "rimraf": "^2.6.1",
    "selenium-webdriver": "^3.1.0",
    "uglify-js": "^2.8.11",
    "url-toolkit": "^2.0.1",
    "watchify": "^3.7.0",
    "webworkify": "^1.4.0"
  },
  "homepage": "https://github.com/video-dev/hls.js",
  "license": "Apache-2.0",
  "main": "./dist/hls.js",
  "name": "hls.js",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/video-dev/hls.js.svg?branch=master)](https://travis-ci.org/video-dev/hls.js)\n[![npm][npm-image]][npm-url]\n\nJoin the discussion: [![Slack Status](http://video-dev.org/badge.svg)](http://video-dev.org/)\n\n# ![hls.js](https://cloud.githubusercontent.com/assets/616833/19739063/e10be95a-9bb9-11e6-8100-2896f8500138.png)\nhls.js is a JavaScript library which implements an [HTTP Live Streaming] client.\nIt relies on [HTML5 video][] and [MediaSource Extensions][] for playback.\n\nIt works by transmuxing MPEG-2 Transport Stream and AAC/MP3 streams into ISO BMFF (MP4) fragments.\nThis transmuxing could be performed asynchronously using [Web Worker] if available in the browser.\nhls.js also supports HLS + fmp4, as announced during [WWDC2016](https://developer.apple.com/videos/play/wwdc2016/504/)\n\nhls.js does not need any player, it works directly on top of a standard HTML```<video>```element.\n\nhls.js is written in [ECMAScript6], and transpiled in ECMAScript5 using [Babel].\n\n[HTML5 video]: http://www.html5rocks.com/en/tutorials/video/basics/\n[MediaSource Extensions]: http://w3c.github.io/media-source/\n[HTTP Live Streaming]: http://en.wikipedia.org/wiki/HTTP_Live_Streaming\n[Web Worker]: http://caniuse.com/#search=worker\n[ECMAScript6]: https://github.com/ericdouglas/ES6-Learning#articles--tutorials\n[Babel]: https://babeljs.io\n\n## Demo\n\n[http://video-dev.github.io/hls.js/demo](http://video-dev.github.io/hls.js/demo)\n\n## Getting Started\n\n```js\n<script src=\"https://cdn.jsdelivr.net/hls.js/latest/hls.min.js\"></script>\n<video id=\"video\"></video>\n<script>\n  if(Hls.isSupported()) {\n    var video = document.getElementById('video');\n    var hls = new Hls();\n    hls.loadSource('http://www.streambox.fr/playlists/test_001/stream.m3u8');\n    hls.attachMedia(video);\n    hls.on(Hls.Events.MANIFEST_PARSED,function() {\n      video.play();\n  });\n }\n</script>\n```\n\n## Video Control\n\nVideo is controlled through HTML ```<video>``` element.\n\nHTMLVideoElement control and events could be used seamlessly.\n\n## they use hls.js in production !\n\n\n|[<img src=\"http://i.cdn.turner.com/adultswim/big/img/global/adultswim.jpg\" width=\"120\">](http://www.adultswim.com/videos/streams)|[<img src=\"http://www.brandsoftheworld.com/sites/default/files/styles/logo-thumbnail/public/042013/new_akamai_logo_cmyk_0.png?itok=cm0ZSgjN\" width=\"120\">](https://www.akamai.com)|[<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Canal%2B.svg/2000px-Canal%2B.svg.png\" width=\"120\">](https://www.canalplus.fr)|[<img src=\"http://press.dailymotion.com/fr/wp-content/uploads/sites/4/2010/06/LOGO-PRESS-BLOG.png\" width=\"120\">](http://www.dailymotion.com)|\n|---|---|---|---|\n|[<img src=\"https://cloud.githubusercontent.com/assets/13046636/23291526/938b9bb6-fa9c-11e6-8d6a-cd50a8f5903f.png\" width=\"120\">](https://freshlive.tv)|[<img src=\"https://flowplayer.org/media/img/logo-blue.png\" width=\"120\">](http://www.flowplayer.org)|[<img src=\"https://avatars1.githubusercontent.com/u/12554082?s=240\" width=\"120\">](http://www.foxsports.com.au)|[<img src=\"https://cloud.githubusercontent.com/assets/244265/12556435/dfaceb48-c353-11e5-971b-2c4429725469.png\" width=\"120\">](http://www.globo.com)|\n|[<img src=\"https://cloud.githubusercontent.com/assets/13573755/20111430/80a6bebc-a5e8-11e6-8dc1-619b1e936f6d.png\" width=\"120\">](https://www.gl-systemhaus.de/)|[<img src=\"https://cloud.githubusercontent.com/assets/6525783/20801836/700490de-b7ea-11e6-82bd-e249f91c7bae.jpg\" width=\"120\">](http://nettrek.de/)|[<img src=\"https://cloud.githubusercontent.com/assets/244265/12556385/999aa884-c353-11e5-9102-79df54384498.png\" width=\"120\">](https://www.nytimes.com/)|[<img src=\"https://cloud.githubusercontent.com/assets/1798553/20356424/ba158574-ac24-11e6-95e1-1ae591b11a0a.png\" width=\"120\">](https://www.peer5.com/)|\n|[<img src=\"https://cloud.githubusercontent.com/assets/4909096/20925062/e26e6fc8-bbb4-11e6-99a5-d4762274a342.png\" width=\"120\">](http://qbrick.com/)|[<img src=\"https://www.radiantmediaplayer.com/images/radiantmediaplayer-new-logo-640.jpg\" width=\"120\">](https://www.radiantmediaplayer.com/)|[<img src=\"https://camo.githubusercontent.com/eacade2264a6325191b6cb9bf7a8c0d05a5b628d/68747470733a2f2f7777772e7274732e63682f68756d6d696e67626972642f7265732f696d616765732f7274732f6c6f676f2d7274732d726f7567652e737667\" width=\"120\">](http://www.rts.ch/)|[<img src=\"https://cloud.githubusercontent.com/assets/12702747/19316434/0a3601de-9067-11e6-85e2-936b1cb099a0.png\" width=\"120\">](https://www.snapstream.com/)|\n|[<img src=\"https://www.streamamg.com/wp-content/themes/barebones/_assets/images/streamamg-logo.png\" width=\"120\">](https://www.streamamg.com/)|[<img src=\"https://streamsharkio.sa.metacdn.com/wp-content/uploads/2015/10/streamshark-dark.svg\" width=\"120\">](https://streamshark.io/)|[<img src=\"https://camo.githubusercontent.com/9580f10e9bfa8aa7fba52c5cb447bee0757e33da/68747470733a2f2f7777772e7461626c6f74762e636f6d2f7374617469632f696d616765732f7461626c6f5f6c6f676f2e706e67\" width=\"120\">](http://my.tablotv.com/)|[<img src=\"https://cloud.githubusercontent.com/assets/1798553/20356423/ba13fd6c-ac24-11e6-971c-be30c75592ef.png\" width=\"120\">](https://www.streamroot.io/)|\n|[<img src=\"http://vignette1.wikia.nocookie.net/tedtalks/images/c/c0/TED_logo.png/revision/20150915192527\" width=\"120\">](https://www.ted.com/)|[<img src=\"https://www.seeklogo.net/wp-content/uploads/2014/12/twitter-logo-vector-download.jpg\" width=\"120\">](https://twitter.com/)|[<img src=\"https://cloud.githubusercontent.com/assets/8201317/20566816/bc33f51c-b196-11e6-9bd3-afb71a06460b.png\" width=\"120\">](http://vwflow.com)|\n\n\n## Player Integration\n\nhls.js is (being) integrated in the following players:\n\n - [Akamai Adaptive Media Player (AMP)](https://www.akamai.com/us/en/solutions/products/media-delivery/adaptive-media-player.jsp)\n - [Clappr](https://github.com/clappr/clappr)\n - [Flowplayer](https://www.flowplayer.org)  through [flowplayer-hlsjs](https://github.com/flowplayer/flowplayer-hlsjs)\n - [MediaElement.js](http://www.mediaelementjs.com)\n - [Videojs](http://videojs.com) through [Videojs-hlsjs](https://github.com/benjipott/videojs-hlsjs)\n - [Videojs](http://videojs.com) through [videojs-hls.js](https://github.com/streamroot/videojs-hls.js). hls.js is integrated as a SourceHandler -- new feature in Video.js 5.\n - [Videojs](http://videojs.com) through [videojs-contrib-hls.js](https://github.com/Peer5/videojs-contrib-hls.js). Production ready plug-in with full fallback compatibility built-in.\n\n\n## Chrome/Firefox integration\n\nmade by [gramk](https://github.com/gramk/chrome-hls),plays hls from address bar and m3u8 links \n\n - Chrome [native-hls](https://chrome.google.com/webstore/detail/native-hls-playback/emnphkkblegpebimobpbekeedfgemhof)\n - Firefox [native-hls](https://addons.mozilla.org/en-US/firefox/addon/native_hls_playback/)\n\n\n\n## Dependencies\n\nNo external JS libs are needed.\nPrepackaged build is included in the [dist] (dist) folder:\n\n - [hls.js](dist/hls.js)\n - [hls.min.js](dist/hls.min.js)\n\nIf you want to bundle the application yourself, use node\n\n```\nnpm install hls.js\n```\n\n## Installation\n\nEither directly include dist/hls.js or dist/hls.min.js\n\nOr type\n\n```sh\nnpm install --save hls.js\n```\n\n## Compatibility\nhls.js is compatible with browsers supporting MSE with 'video/MP4' inputs.\nAs of today, it is supported on:\n\n * Chrome for Android 34+\n * Chrome for Desktop 34+\n * Firefox for Android 41+\n * Firefox for Desktop 42+\n * IE11+ for Windows 8.1+\n * Edge for Windows 10+\n * Opera for Desktop\n * Vivaldi for Desktop\n * Safari for Mac 8+ (beta)\n\n## CORS\n\nAll HLS resources must be delivered with [CORS headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) permitting `GET` requests.\n\n## Features\n\n  - VoD & Live playlists\n    - DVR support on Live playlists\n  - fragmented MP4 container (beta)\n  - MPEG-2 TS container\n    - ITU-T Rec. H.264 and ISO/IEC 14496-10 Elementary Stream\n    - ISO/IEC 13818-7 ADTS AAC Elementary Stream\n    - ISO/IEC 11172-3 / ISO/IEC 13818-3 (MPEG-1/2 Audio Layer III) Elementary Stream\n    - Packetized metadata (ID3) Elementary Stream\n  - AAC container (audio only streams)\n  - MPEG Audio container (MPEG-1/2 Audio Layer III audio only streams)\n  - Timed Metadata for HTTP Live Streaming (in ID3 format, carried in MPEG-2 TS)\n  - AES-128 decryption\n  - SAMPLE-AES decryption\n  - CEA-608/708 captionss\n  - WebVTT subtitles\n  - Alternate Audio Track Rendition (Master Playlist with alternative Audio) for VoD and Live playlists    \n  - Adaptive streaming\n    - Manual & Auto Quality Switching\n      - 3 Quality Switching modes are available (controllable through API means)\n      \t- Instant switching (immediate quality switch at current video position)\n      \t- Smooth switching (quality switch for next loaded fragment)\n      \t- Bandwidth conservative switching (quality switch change for next loaded fragment, without flushing the buffer)\n      - In Auto-Quality mode, emergency switch down in case bandwidth is suddenly dropping to minimize buffering.        \n  - Accurate Seeking on VoD & Live (not limited to fragment or keyframe boundary)\n  - Ability to seek in buffer and back buffer without redownloading segments\n  - Built-in Analytics\n    - Every internal events could be monitored (Network Events,Video Events)\n    - Playback session metrics are also exposed\n  - Resilience to errors\n    - Retry mechanism embedded in the library\n    - Recovery actions could be triggered fix fatal media or network errors\n  - [Redundant/Failover Playlists](https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/StreamingMediaGuide/UsingHTTPLiveStreaming/UsingHTTPLiveStreaming.html#//apple_ref/doc/uid/TP40008332-CH102-SW22)\n\n## Not Supported (Yet)\n  - MP3 Elementary Stream in Edge for Windows 10+\n\n### Supported M3U8 tags\n\n  - `#EXTM3U`\n  - `#EXTINF`\n  - `#EXT-X-STREAM-INF` (adaptive streaming)\n  - `#EXT-X-ENDLIST` (Live playlist)\n  - `#EXT-X-MEDIA-SEQUENCE`\n  - `#EXT-X-TARGETDURATION`\n  - `#EXT-X-DISCONTINUITY`\n  - `#EXT-X-DISCONTINUITY-SEQUENCE`  \n  - `#EXT-X-BYTERANGE`\n  - `#EXT-X-MAP`\n  - `#EXT-X-KEY` (https://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-3.4.4)\n  - `#EXT-X-PROGRAM-DATE-TIME` (https://tools.ietf.org/html/draft-pantos-http-live-streaming-18#section-4.3.2.6)\n  - `EXT-X-START:TIME-OFFSET=x` (https://tools.ietf.org/html/draft-pantos-http-live-streaming-18#section-4.3.5.2)\n\n\n## API and Configuration Parameters\n\nhls.js can be configured and controlled easily, click [here](doc/API.md) for details.\n\n\n## License\n\n  hls.js is released under [Apache 2.0 License](LICENSE)\n\n## Contributing\n\nPull requests are welcome. Here is a quick guide on how to start.\n\n - First, checkout the repository and install required dependencies\n```sh\ngit clone https://github.com/video-dev/hls.js.git\n# setup dev environement\ncd hls.js\nnpm install\n# build dist/hls.js, watch file change for rebuild and launch demo page\nnpm run dev\n# lint\nnpm run lint\n```\n - Use [EditorConfig](http://editorconfig.org/) or at least stay consistent to the file formats defined in the `.editorconfig` file.\n - Develop in a topic branch, not master\n - Don't commit the updated `dist/hls.js` file in your PR. We'll take care of generating an updated build right before releasing a new tagged version.\n\n## Design\n\nClick [here](doc/design.md) for details.\n\n### Tested With\n\n[<img src=\"https://cloud.githubusercontent.com/assets/7864462/12837037/452a17c6-cb73-11e5-9f39-fc96893bc9bf.png\" alt=\"Browser Stack Logo\" width=\"300\">](https://www.browserstack.com/)\n\n[npm-image]: https://img.shields.io/npm/v/hls.js.svg?style=flat\n[npm-url]: https://npmjs.org/package/hls.js\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/video-dev/hls.js.git"
  },
  "scripts": {
    "build": "npm run buildlib && rimraf dist/* && npm run builddist && npm run builddistlight",
    "builddist": "browserify -t browserify-versionify -t [babelify] -p browserify-derequire -p bundle-collapser/plugin -s Hls src/index.js --debug | exorcist dist/hls.js.map -b . > dist/hls.js && npm run minify",
    "builddistlight": "browserify -t [browserify-conditionalify --definitions [--subtitle 0 --altaudio 0 ] ] -t browserify-versionify -t [babelify] -p browserify-derequire -p bundle-collapser/plugin -s Hls src/index.js --debug | exorcist dist/hls.light.js.map -b . > dist/hls.light.js && npm run minifylight",
    "buildlib": "rimraf lib/* && babel src --out-dir lib",
    "dev": "npm run builddist && (npm run open -s & parallelshell 'npm run live-reload -s' 'npm run serve -s' 'npm run watch -s')",
    "lint": "jshint src/",
    "live-reload": "live-reload --port 8001 dist/",
    "major": "mversion ma && npm run preparerelease",
    "minify": "uglifyjs dist/hls.js -c sequences=true,dead_code=true,conditionals=true,booleans=true,unused=true,if_return=true,join_vars=true,drop_console=true -m --screw-ie8  > dist/hls.min.js",
    "minifylight": "uglifyjs dist/hls.light.js -c sequences=true,dead_code=true,conditionals=true,booleans=true,unused=true,if_return=true,join_vars=true,drop_console=true -m --screw-ie8  > dist/hls.light.min.js",
    "minor": "mversion mi && npm run preparerelease",
    "open": "opener http://localhost:8000/demo/",
    "patch": "mversion p && npm run preparerelease",
    "preparerelease": "npm run build && npm run test && git add dist/* && git commit -m 'update dist'",
    "prerelease": "mversion prerelease && npm run preparerelease",
    "pretest": "npm run lint",
    "serve": "http-server -p 8000 .",
    "test": "mocha --compilers js:babel-register --recursive tests/unit",
    "testfunc": "mocha --compilers js:babel-register tests/functional/auto/hlsjs.js --timeout 40000",
    "watch": "watchify --debug -s Hls src/index.js -t [babelify] -o dist/hls.js"
  },
  "version": "0.7.4"
}
